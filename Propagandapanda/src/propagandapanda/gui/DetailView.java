/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package propagandapanda.gui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.border.TitledBorder;
import propagandapanda.backendprovider.BackendProvider;

/**
 *
 * @author Michi
 */
public class DetailView extends javax.swing.JFrame {

    private HashMap<JCheckBox, BackendProvider> cb2prov;
    private HashMap<JCheckBox, JPanel> cb2panel;
    private int activeCheckBoxes = 0;
    /**
     * Creates new form DetailView
     * @param provs
     */
    public DetailView(ArrayList<BackendProvider> provs) {
        initComponents();
        int capacity = (int) (provs.size()/0.75 + 1);
        cb2prov = new HashMap<>(capacity);
        cb2panel = new HashMap<>(capacity);
        JPanel pan;
        JCheckBox cb;
        JCheckBoxListener listener = new JCheckBoxListener();
        for(BackendProvider prov : provs){
            pan = new JPanel();
            pan.setLayout(new BoxLayout(pan, BoxLayout.Y_AXIS));
            pan.setBorder(new TitledBorder(prov.getName()));
            pan.add(prov.getDetailPanel());
            cb = new JCheckBox("Senden", true);
            activeCheckBoxes++;
            cb.addItemListener(listener);
            cb2prov.put(cb, prov);
            cb2panel.put(cb, pan);
            detailPanel.add(pan);
            detailPanel.add(cb);
            detailPanel.add(new JToolBar.Separator());
        }
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailPanel = new javax.swing.JPanel();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        detailPanel.setLayout(new javax.swing.BoxLayout(detailPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(detailPanel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
        );

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(311, Short.MAX_VALUE)
                .addComponent(sendButton)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        detailPanel.removeAll();
        activeCheckBoxes = 0;
        sendButton.setEnabled(false);
        JPanel pan;
        BackendProvider prov;
        boolean send;
        HashMap<JCheckBox, BackendProvider> tmpCb2prov = new HashMap<>();
        HashMap<JCheckBox, JPanel> tmpCb2panel = new HashMap<>();
        JCheckBox cb;
        JCheckBoxListener listener = new JCheckBoxListener();
        for(Entry<JCheckBox, BackendProvider> e : cb2prov.entrySet()){
            if(e.getKey().isSelected())
            {
                cb = null;
                prov = e.getValue();
                send = prov.send();
                pan = new JPanel();
                pan.setLayout(new BoxLayout(pan, BoxLayout.Y_AXIS));
                pan.setBorder(new TitledBorder(prov.getName()));
                pan.add(prov.getStatusPanel());
                pan.setAlignmentX(Component.CENTER_ALIGNMENT);
                
                if(!send){
                    cb = new JCheckBox("Senden", true);
                    activeCheckBoxes++;
                    cb.addItemListener(listener);
                    tmpCb2prov.put(cb, prov);
                    tmpCb2panel.put(cb, pan);
                }
            }else{
                cb = e.getKey();
                pan = cb2panel.get(cb);
                tmpCb2prov.put(cb, cb2prov.get(cb));
                tmpCb2panel.put(cb, pan);
            }
            detailPanel.add(pan);
            if(cb != null)
                detailPanel.add(cb);
            detailPanel.add(new JToolBar.Separator());
        }
        
        cb2prov = tmpCb2prov;
        cb2panel = tmpCb2panel;
        if(tmpCb2prov.isEmpty()){
            sendButton.setEnabled(true);
            sendButton.setText("SchlieÃŸen");
            for( ActionListener al : sendButton.getActionListeners() ) {
                sendButton.removeActionListener( al );
            }
            sendButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    closeButtonActionPerformed();
                }
            });
            
        }else if(activeCheckBoxes > 0)
            sendButton.setEnabled(true);
        
        detailPanel.revalidate();
        detailPanel.repaint();
        
    }//GEN-LAST:event_sendButtonActionPerformed

    public void closeButtonActionPerformed(){
        this.dispose();
    }
    
    private class JCheckBoxListener implements ItemListener{

        @Override
        public void itemStateChanged(ItemEvent e) {
            JCheckBox cb = (JCheckBox) e.getItem();
            if(cb.isSelected()){
               activeCheckBoxes++;
               if(activeCheckBoxes > 0){
                   sendButton.setEnabled(true);
               }
            }else{
                activeCheckBoxes--;
                if(activeCheckBoxes == 0){
                    sendButton.setEnabled(false);
                }
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel detailPanel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
